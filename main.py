import os
import asyncio
import logging
import sys
import re
from typing import List, Dict
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
from bot.utils.search_engine import smart_document_search, build_docs_url, should_use_ai_directly, has_only_technical_files
from bot.utils.ai_fallback import ask_ai
from keyboards import main_reply_keyboard, docs_inline_keyboard

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_DISK_FOLDER_PATH = os.getenv("YANDEX_DISK_FOLDER_PATH", "/")
YANDEX_DISK_PUBLIC_KEY = os.getenv("YANDEX_DISK_PUBLIC_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "")  # URL –æ—Ç Render
PORT = int(os.getenv("PORT", 3000))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logging.basicConfig(level=logging.INFO, stream=sys.stdout)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

GREETINGS = {
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
    "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±–µ–¥–∞", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Ö–∞–π", "hello", "hi"
}

SIMPLE_QUERIES = {"—É—Ä—Ä–∏", "urri", "hdl", "–±–∞—Å–ø—Ä–æ", "buspro", "–º–∞—Ç–µ–∫", "matech", "–π–∏–ª–∞–π—Ç", "yeelight"}

class SupportForm(StatesGroup):
    name = State()
    phone = State()
    original_query = State()

def should_use_ai_improved(query: str) -> bool:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò
    """
    query_lower = query.lower().strip()
    
    # –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–¥—É—Ç –∫ –ò–ò (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –±—Ä–µ–Ω–¥—ã)
    never_use_ai_keywords = {
        # –ë—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
        "–∏–∑–∏–∫—É–ª", "easycool", "—É—Ä—Ä–∏", "urri", "—Ö–¥–ª", "hdl", "–±–∞—Å–ø—Ä–æ", "buspro", 
        "–º–∞—Ç–µ–∫", "matech", "–π–∏–ª–∞–π—Ç", "yeelight", "–∏–∑–∏ –∫—É–ª",
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        "—Ç–µ—Ö–Ω–∏—á–∫–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ø–∞—Å–ø–æ—Ä—Ç", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "manual",
        "—Å–∫–∞—á–∞—Ç—å", "—Ñ–∞–π–ª", "pdf", "—Å—Ö–µ–º–∞", "—á–µ—Ä—Ç–µ–∂", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫",
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        "—Ç–µ—Ö–Ω–∏—á–∫–∞ –Ω–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞", "–ø–∞—Å–ø–æ—Ä—Ç –Ω–∞", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞"
    }
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò
    if any(keyword in query_lower for keyword in never_use_ai_keywords):
        logging.info(f"‚ùå –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ '{query}' ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
        return False
    
    # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –∫ –ò–ò (—Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã)
    ai_direct_keywords = {
        # –û–±—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        "–∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å", "–∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å", "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "–∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å", "–∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å",
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä
        "–∫–∞–∫–æ–π –ª—É—á—à–µ", "—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å", "—Å—Ä–∞–≤–Ω–∏—Ç–µ", "–æ—Ç–ª–∏—á–∏—è", "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É",
        "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏", "–ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã",
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∏ –æ—à–∏–±–∫–∏
        "–ø—Ä–æ–±–ª–µ–º–∞ —Å", "–æ—à–∏–±–∫–∞", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è", 
        "–Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è", "—Å–ª–æ–º–∞–ª", "–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏—è
        "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω", "–ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã", "–æ–±—ä—è—Å–Ω–∏—Ç–µ",
        "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞",
        
        # –°–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
        "–ø—Ä–æ—Ç–æ–∫–æ–ª", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏", "api", "rest api", "websocket", "mqtt",
        "knx ip", "bacnet", "modbus", "zigbee", "z-wave", "wi-fi",
        "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏", "—Å—Ü–µ–Ω–∞—Ä–∏–π", "—Å—Ü–µ–Ω–∞—Ä", "–ª–æ–≥–∏–∫–∞"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò
    has_ai_keywords = any(keyword in query_lower for keyword in ai_direct_keywords)
    
    # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ê–ª–∏—Å—ã
    alisa_keywords = {
        "–∞–ª–∏—Å", "—è–Ω–¥–µ–∫—Å –∞–ª–∏—Å", "yandex alice", "alisa", "mgwip", 
        "–≥–æ–ª–æ—Å–æ–≤", "–≥–æ–ª–æ—Å–æ–≤–æ–π", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "—à–ª—é–∑"
    }
    
    if any(keyword in query_lower for keyword in alisa_keywords):
        # –î–ª—è –ê–ª–∏—Å—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π - –ø–æ–∏—Å–∫, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ò–ò
        if any(word in query_lower for word in ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏", "–Ω–∞—Å—Ç—Ä–æ–∏", "–ø–æ–¥–∫–ª—é—á–∏"]):
            logging.info(f"‚ùå –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ê–ª–∏—Å—ã '{query}' ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
            return False
        else:
            logging.info(f"‚úÖ –†–µ—à–µ–Ω–∏–µ: —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ê–ª–∏—Å—É '{query}' ‚Üí –∫ –ò–ò")
            return True
    
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    if has_ai_keywords:
        logging.info(f"‚úÖ –†–µ—à–µ–Ω–∏–µ: —Å–ª–æ–∂–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å '{query}' ‚Üí –∫ –ò–ò")
        return True
    
    # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    if len(query_lower.split()) <= 2:
        logging.info(f"‚ùå –†–µ—à–µ–Ω–∏–µ: –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å '{query}' ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
        return False
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò
    words_count = len(query_lower.split())
    if words_count >= 4:  # –î–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        # –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        if any(doc_word in query_lower for doc_word in ["–Ω–∞–π–¥–∏", "—Å–∫–∏–Ω—å", "–¥–∞–π", "—Å–±—Ä–æ—Å—å", "–æ—Ç–ø—Ä–∞–≤—å"]):
            logging.info(f"‚ùå –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ '{query}' ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
            return False
        logging.info(f"‚úÖ –†–µ—à–µ–Ω–∏–µ: –¥–ª–∏–Ω–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å '{query}' ‚Üí –∫ –ò–ò")
        return True
    
    logging.info(f"‚ùå –†–µ—à–µ–Ω–∏–µ: –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å '{query}' ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
    return False

def extract_brands_from_query(query: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ò–ò"""
    query_lower = query.lower()
    brands = []
    
    brand_keywords = {
        "hdl": "HDL",
        "—É—Ä—Ä–∏": "URRI", 
        "urri": "URRI",
        "–±–∞—Å–ø—Ä–æ": "Buspro",
        "buspro": "Buspro",
        "–º–∞—Ç–µ–∫": "Matech",
        "matech": "Matech",
        "–∏–æ—Ç": "iOT Systems",
        "iot": "iOT Systems",
        "–∞–ª–∏—Å": "–Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å–∞",
        "alisa": "–Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å–∞",
        "yeelight": "Yeelight Pro",
        "–π–∏–ª–∞–π—Ç": "Yeelight Pro",
        "coolautomation": "CoolAutomation"
    }
    
    for keyword, brand in brand_keywords.items():
        if keyword in query_lower:
            brands.append(brand)
    
    return ", ".join(set(brands)) if brands else ""

def format_search_results(results: List[Dict], query: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not results:
        return "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: '{query}'\n\n"
    
    for i, result in enumerate(results[:5], 1):
        name = result.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        docs_url = build_docs_url(result['path']) if 'path' in result else result.get('folder_link', '#')
        
        if result.get('is_folder_link'):
            response += f"{i}. üìÅ {name}\n   ‚îî‚îÄ üîó [–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É]({docs_url})\n\n"
        else:
            response += f"{i}. {name}\n   ‚îî‚îÄ üìé [–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç]({docs_url})\n\n"
    
    response += "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?"
    return response

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üë®‚Äçüíª –Ø HDL Assistant ‚Äî –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –ø–æ–¥–∫–ª—é—á—É –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n\n"
        "ü§î –ó–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏? üìë –ù—É–∂–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –º–∞–Ω—É–∞–ª? üöÄ –Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! ‚ú®\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é:",
        reply_markup=main_reply_keyboard
    )

@dp.message(lambda msg: msg.text == "üìö –ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
async def handle_docs_base(message: Message):
    await message.answer(
        "üìÇ –ë–∞–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\nhttps://disk.360.yandex.ru/d/xJi6eEXBTq01sw",
        reply_markup=docs_inline_keyboard
    )

@dp.message(lambda msg: msg.text == "üéì –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def handle_courses(message: Message):
    await message.answer("üéì –û–±—É—á–∞—é—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ HDL:\nhttps://iotsystems.getcourse.ru/teach/control")

@dp.message(lambda msg: msg.text == "üìû –¢–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
async def handle_support_button(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(SupportForm.name)

@dp.message(SupportForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä, –±–µ–∑ +7):\n\n–ü—Ä–∏–º–µ—Ä: <code>9777809807</code>", parse_mode="HTML")
    await state.set_state(SupportForm.phone)

@dp.message(SupportForm.phone)
async def process_phone(message: Message, state: FSMContext):
    user_input = message.text.strip()
    digits_only = re.sub(r"\D", "", user_input)
    if len(digits_only) != 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä (–±–µ–∑ +7):\n–ü—Ä–∏–º–µ—Ä: <code>9777809807</code>", parse_mode="HTML")
        return
    full_phone = f"+7{digits_only}"
    await state.update_data(phone=full_phone)
    data = await state.get_data()
    name = data["name"]
    original_query = data.get("original_query", "–ó–∞–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
    support_text = (
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –§–ò–û: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {full_phone}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üîó @ {message.from_user.username or '‚Äî'}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {original_query}"
    )
    GROUP_CHAT_ID = -1003044266223
    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=support_text)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: https://t.me/hdl_support")
    await state.clear()

async def handle_ai_directly(message: Message, text: str, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –∫ –ò–ò
    """
    thinking_msg = await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å...")
    
    await state.update_data(original_query=text)
    
    query_lower = text.lower()
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ê–ª–∏—Å—ã —Å KNX
    if any(keyword in query_lower for keyword in ["–∞–ª–∏—Å", "–≥–æ–ª–æ—Å–æ–≤", "alisa"]):
        context = (
            "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
            "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö. "
            
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ KNX:\n"
            "1. –¢—Ä–µ–±—É–µ—Ç—Å—è —à–ª—é–∑ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "2. HDL –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Smart Gateway\n" 
            "3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≤—ã–∫ –ê–ª–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º\n"
            "4. KNX - –ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n\n"
            
            "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            "- HDL Smart Gateway —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "- –®–ª—é–∑—ã Buspro —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ê–ª–∏—Å—ã\n" 
            "- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π KNX –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ HDL Smart\n\n"
            
            "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
        )
    else:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        brands_context = extract_brands_from_query(text)
        context = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
            f"–ë—Ä–µ–Ω–¥—ã: {brands_context if brands_context else 'HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems'}. "
            "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
        )
    
    ai_response = await ask_ai(text, context=context)
    
    await thinking_msg.edit_text(
        f"üß† {ai_response}\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
            ]
        ])
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ ---
@dp.message()
async def handle_document_request(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        return

    if text.lower().strip(".,!?") in GREETINGS:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!",
            reply_markup=main_reply_keyboard
        )
        return

    if text in ["üìö –ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "üéì –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìû –¢–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"]:
        return

    query_lower = text.lower()

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    use_ai_directly = should_use_ai_improved(text)
    logging.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è '{text}': {'–ò–ò' if use_ai_directly else '–ø–æ–∏—Å–∫'}")

    if use_ai_directly:
        await handle_ai_directly(message, text, state)
        return

    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    search_message = await message.answer(f"üîç –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ: {text}")
    
    try:
        results = await smart_document_search(text)

        if results:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–∞–ø–∫—É
            if len(results) == 1 and results[0].get("is_folder_link"):
                folder_link = results[0].get("folder_link")
                await search_message.edit_text(
                    f"üìÅ <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {text}</b>\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                    f"üîó <a href='{folder_link}'>–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ</a>\n\n"
                    f"–í –ø–∞–ø–∫–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: <b>{text}</b>\n\n"
            response += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}\n\n"
            
            for i, file_data in enumerate(results[:3], 1):
                try:
                    # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê –î–õ–Ø –ö–ê–ë–ï–õ–Ø KNX YE00820
                    file_name = file_data.get("name", "").lower()
                    if "ye00820" in file_name and "knx" in file_name:
                        direct_link = "https://docs.360.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2Fh1up8PyRs7zLi0hvFuTbhsLh7Nh2dv1lmMR1wsc5WOjH0pYg8ba5c4cLlLY6oeuWtFP6gwbjvtaafTptcua4SA%3D%3D%3A%2F01.%20iOT%20Systems%2F02.%20iOT%20%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2FYE00820%20KNX%20%D0%BA%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%20J-Y(ST)Y%2C%202x2x0%2C8%2C%20%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9%20(%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%BF%D0%BE%20100%D0%BC)%2FYE00820%20ru.pdf&name=YE00820%20ru.pdf&nosw=1"
                    else:
                        direct_link = build_docs_url(file_data["path"])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                    response += f"{i}. <b>{file_data['name']}</b>\n"
                    response += f"   ‚îî‚îÄ üìé <a href='{direct_link}'>–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>\n\n"
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
                    response += f"{i}. <b>{file_data['name']}</b>\n"
                    response += f"   ‚îî‚îÄ üìé –§–∞–π–ª –≤ –±–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n\n"
            
            response += "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?"
            
            # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
            await search_message.edit_text(
                response,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
                    ]
                ]),
                parse_mode="HTML"  # –í–∞–∂–Ω–æ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!
            )
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if len(results) == 1 and has_only_technical_files(results):
                await message.answer(
                    "ü§î –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∞ –Ω–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.\n\n"
                    "–î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–°–µ–π—á–∞—Å –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é", callback_data=f"ask_ai:{text}")]
                    ])
                )
            
        else:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò
            await search_message.edit_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
            await handle_ai_directly(message, text, state)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await search_message.edit_text(
            "–î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏,—è –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é"
        )
        await handle_ai_directly(message, text, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–∞/–ù–µ—Ç"
@dp.callback_query(lambda c: c.data.startswith("info_helpful:"))
async def handle_info_helpful_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    action = callback.data.split(":")[1]
    data = await state.get_data()
    original_query = data.get("original_query", "–∑–∞–ø—Ä–æ—Å")
    
    if action == "yes":
        response_text = "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å HDL Assistant! üéâ"
        
        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await callback.message.answer(
            response_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
            ])
        )
        
    elif action == "no":
        response_text = "–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å - —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üí°"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∂–∏–º–∞–ª "–ù–µ—Ç" —Ä–∞–Ω–µ–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        user_data = await state.get_data()
        if user_data.get('already_clicked_no'):
            await callback.message.answer(
                response_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"ask_ai:{original_query}"),
                        InlineKeyboardButton(text="üìû –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="support_form")
                    ]
                ])
            )
        else:
            # –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ "–ù–µ—Ç" - –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await callback.message.answer(response_text)
            await state.update_data(already_clicked_no=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "new_search")
async def handle_new_search_callback(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üîç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!")

@dp.callback_query(lambda c: c.data == "support_form")
async def support_form_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(SupportForm.name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò"
@dp.callback_query(lambda c: c.data.startswith("ask_ai:"))
async def handle_ask_ai_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    query = callback.data.replace("ask_ai:", "")
    thinking_msg = await callback.message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    await state.update_data(original_query=query)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    brands_context = extract_brands_from_query(query)
    context = (
        "–¢–´ –î–û–õ–ñ–ï–ù –û–¢–í–ï–ß–ê–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï! –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û!\n\n"
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
        f"–ë—Ä–µ–Ω–¥—ã: {brands_context if brands_context else 'HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems'}. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.\n\n"
        "–í–ê–ñ–ù–û: –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã."
    )
    
    ai_response = await ask_ai(query, context=context)
    
    await thinking_msg.edit_text(
        f"üß† {ai_response}\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
            ]
        ])
    )

async def on_startup(bot: Bot, base_url: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    if base_url:
        webhook_url = f"{base_url}/webhook"
        await bot.set_webhook(webhook_url)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª–µ–Ω")

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if RENDER_EXTERNAL_URL:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app = web.Application()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path="/webhook")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        setup_application(app, dp, bot=bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞
        async def on_startup_app(app):
            await on_startup(bot, RENDER_EXTERNAL_URL)
        
        app.on_startup.append(on_startup_app)
        app.on_shutdown.append(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        web.run_app(app, host="0.0.0.0", port=PORT)
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        async def run_polling():
            await dp.start_polling(bot)
        
        asyncio.run(run_polling())

if __name__ == "__main__":
    main()