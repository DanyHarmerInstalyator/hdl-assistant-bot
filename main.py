                        #    2 version HDL BOT



# import asyncio
# import logging
# import sys
# import os
# from aiogram import Bot, Dispatcher
# from aiogram.client.default import DefaultBotProperties
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart
# from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
# from dotenv import load_dotenv

# from bot.utils.yandex_disk_client import search_in_file_index, build_docs_url
# from bot.utils.ai_fallback import ask_qwen

# load_dotenv()

# BOT_TOKEN = os.getenv("BOT_TOKEN")
# YANDEX_DISK_FOLDER_PATH = os.getenv("YANDEX_DISK_FOLDER_PATH", "/")
# YANDEX_DISK_PUBLIC_KEY = os.getenv("YANDEX_DISK_PUBLIC_KEY")
# OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# if not BOT_TOKEN:
#     raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not YANDEX_DISK_PUBLIC_KEY:
#     raise ValueError("‚ùå YANDEX_DISK_PUBLIC_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not OPENROUTER_API_KEY:
#     raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# logging.basicConfig(level=logging.INFO, stream=sys.stdout)
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher()

# # ‚úÖ –§—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî –í–ù–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞!
# def get_support_keyboard() -> InlineKeyboardMarkup:
#     button = InlineKeyboardButton(
#         text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º",
#         url="https://t.me/hdl_support"  
#     )
#     return InlineKeyboardMarkup(inline_keyboard=[[button]])

# @dp.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç!üë®‚Äçüíª –Ø HDL Assistant –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n\n"
#         "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
#         "<i>Buspro MDL64-BP.53</i>\n"
#         "<i>HDL DALI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</i>\n"
#         "<i>Matech –¥–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è</i>"
#     )

# @dp.message()
# async def handle_document_request(message: Message) -> None:  
#     user_query = message.text.strip()
#     if not user_query:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
#         return

#     await message.answer(f"üîç –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ: <b>{user_query}</b>")

#     results = search_in_file_index(user_query)

#     if results:
#         best = results[0]
#         try:
#             direct_link = build_docs_url(best["path"])
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF:\n{direct_link}"
#             )
#         except Exception as e:
#             base = YANDEX_DISK_FOLDER_PATH.rstrip("/")
#             relative_path = (
#                 best["path"][len(base):].lstrip("/")
#                 if best["path"].startswith(base)
#                 else best["path"].lstrip("/")
#             )
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üìÅ –ü—É—Ç—å –≤ –ø–∞–ø–∫–µ:\n<code>{relative_path}</code>\n\n"
#                 f"üîó –û–±—â–∞—è –ø–∞–ø–∫–∞: https://disk.360.yandex.ru/d/{YANDEX_DISK_PUBLIC_KEY}"
#             )
#     else:
#         thinking_msg = await message.answer("üß† –ò–ò –¥—É–º–∞–µ—Ç... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
#         context_brands = "HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems"
#         ai_response = await ask_qwen(user_query, context=context_brands)
#         await thinking_msg.edit_text(
#             f"üîç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–ò üë®‚Äçüíª –æ—Ç–≤–µ—á–∞–µ—Ç:\n\n{ai_response}",
#             reply_markup=get_support_keyboard()
#         )

# async def main() -> None:
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())


                                       #    3 version HDL BOT


# import asyncio
# import logging
# import sys
# import os
# from aiogram import Bot, Dispatcher
# from aiogram.client.default import DefaultBotProperties
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart
# from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from dotenv import load_dotenv

# from bot.utils.yandex_disk_client import search_in_file_index, build_docs_url
# from bot.utils.ai_fallback import ask_qwen

# load_dotenv()

# BOT_TOKEN = os.getenv("BOT_TOKEN")
# YANDEX_DISK_FOLDER_PATH = os.getenv("YANDEX_DISK_FOLDER_PATH", "/")
# YANDEX_DISK_PUBLIC_KEY = os.getenv("YANDEX_DISK_PUBLIC_KEY")
# OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# if not BOT_TOKEN:
#     raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not YANDEX_DISK_PUBLIC_KEY:
#     raise ValueError("‚ùå YANDEX_DISK_PUBLIC_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not OPENROUTER_API_KEY:
#     raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# logging.basicConfig(level=logging.INFO, stream=sys.stdout)
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher()

# # --- FSM –¥–ª—è —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
# class SupportForm(StatesGroup):
#     name = State()
#     phone = State()

# # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# def get_support_keyboard() -> InlineKeyboardMarkup:
#     """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã."""
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", callback_data="support_form")]
#     ])

# def get_chat_button() -> InlineKeyboardMarkup:
#     """–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", url="https://t.me/hdl_support")]
#     ])

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# @dp.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç!üë®‚Äçüíª –Ø HDL Assistant –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.\n\n"
#         "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
#         "<i>Buspro MDL64-BP.53</i>\n"
#         "<i>HDL DALI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä</i>\n"
#         "<i>Matech –¥–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è</i>"
#     )

# @dp.callback_query(lambda c: c.data == "support_form")
# async def support_form_start(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
#     await state.set_state(SupportForm.name)

# @dp.message(SupportForm.name)
# async def process_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):")
#     await state.set_state(SupportForm.phone)

# @dp.message(SupportForm.phone)
# async def process_phone(message: Message, state: FSMContext):
#     phone = message.text
#     data = await state.get_data()
#     name = data["name"]

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
#     support_text = (
#         f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
#         f"üë§ –§–ò–û: {name}\n"
#         f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
#         f"üÜî ID: {message.from_user.id}\n"
#         f"üîó @ {message.from_user.username or '–Ω–µ—Ç username'}"
#     )

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞, –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω)
#     try:
#         await bot.send_message(chat_id="-1003044266223", text=support_text)
#     except Exception as e:
#         # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
#         print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
#         # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞–º –ø–æ ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
#     await message.answer(
#         "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
#         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:",
#         reply_markup=get_chat_button()
#     )
#     await state.clear()

# @dp.message()
# async def handle_document_request(message: Message) -> None:
#     user_query = message.text.strip()
#     if not user_query:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
#         return

#     await message.answer(f"üîç –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ: <b>{user_query}</b>")

#     results = search_in_file_index(user_query)

#     if results:
#         best = results[0]
#         try:
#             direct_link = build_docs_url(best["path"])
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF:\n{direct_link}"
#             )
#         except Exception as e:
#             base = YANDEX_DISK_FOLDER_PATH.rstrip("/")
#             relative_path = (
#                 best["path"][len(base):].lstrip("/")
#                 if best["path"].startswith(base)
#                 else best["path"].lstrip("/")
#             )
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üìÅ –ü—É—Ç—å –≤ –ø–∞–ø–∫–µ:\n<code>{relative_path}</code>\n\n"
#                 f"üîó –û–±—â–∞—è –ø–∞–ø–∫–∞: https://disk.360.yandex.ru/d/{YANDEX_DISK_PUBLIC_KEY}"
#             )
#     else:
#         thinking_msg = await message.answer("üß† –ò–ò –¥—É–º–∞–µ—Ç... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
#         context_brands = "HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems"
#         ai_response = await ask_qwen(user_query, context=context_brands)
#         await thinking_msg.edit_text(
#             f"üîç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–ò üë®‚Äçüíª –æ—Ç–≤–µ—á–∞–µ—Ç:\n\n{ai_response}",
#             reply_markup=get_support_keyboard()
#         )

# # --- –ó–∞–ø—É—Å–∫ ---
# async def main() -> None:
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())






# import asyncio
# import logging
# import sys
# import os
# from aiogram import Bot, Dispatcher
# from aiogram.client.default import DefaultBotProperties
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart
# from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from dotenv import load_dotenv

# from bot.utils.yandex_disk_client import search_in_file_index, build_docs_url
# from bot.utils.ai_fallback import ask_qwen

# load_dotenv()

# BOT_TOKEN = os.getenv("BOT_TOKEN")
# YANDEX_DISK_FOLDER_PATH = os.getenv("YANDEX_DISK_FOLDER_PATH", "/")
# YANDEX_DISK_PUBLIC_KEY = os.getenv("YANDEX_DISK_PUBLIC_KEY")
# OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# if not BOT_TOKEN:
#     raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not YANDEX_DISK_PUBLIC_KEY:
#     raise ValueError("‚ùå YANDEX_DISK_PUBLIC_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
# if not OPENROUTER_API_KEY:
#     raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# logging.basicConfig(level=logging.INFO, stream=sys.stdout)
# bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# dp = Dispatcher()

# # --- FSM –¥–ª—è —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
# class SupportForm(StatesGroup):
#     name = State()
#     phone = State()
#     original_query = State()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å

# # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# def get_support_keyboard() -> InlineKeyboardMarkup:
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", callback_data="support_form")]
#     ])

# def get_chat_button() -> InlineKeyboardMarkup:
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", url="https://t.me/hdl_support")]
#     ])

# # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# @dp.message(CommandStart())
# async def command_start_handler(message: Message) -> None:
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç!üë®‚Äçüíª –ú–µ–Ω—è –∑–æ–≤—É—Ç HDL Assistant –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞–ª–∏—Å—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ.\n\n"
#         "–ó–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏? –ù—É–∂–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –º–∞–Ω—É–∞–ª? –Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!\n"
#     )

# @dp.callback_query(lambda c: c.data == "support_form")
# async def support_form_start(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()
#     await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
#     await state.set_state(SupportForm.name)

# @dp.message(SupportForm.name)
# async def process_name(message: Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67):")
#     await state.set_state(SupportForm.phone)

# @dp.message(SupportForm.phone)
# async def process_phone(message: Message, state: FSMContext):
#     phone = message.text
#     data = await state.get_data()
#     name = data["name"]
#     original_query = data.get("original_query", "–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

#     support_text = (
#         f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
#         f"üë§ –§–ò–û: {name}\n"
#         f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
#         f"üÜî ID: {message.from_user.id}\n"
#         f"üîó @ {message.from_user.username or '–Ω–µ—Ç username'}\n\n"
#         f"‚ùì –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{original_query}"
#     )

#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
#     GROUP_CHAT_ID = -1003044266223 
#     try:
#         await bot.send_message(chat_id=-1003044266223, text=support_text)
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         await state.clear()
#         return

#     await message.answer(
#         "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
#         "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
#         reply_markup=get_chat_button()
#     )
#     await state.clear()

# @dp.message()
# async def handle_document_request(message: Message, state: FSMContext) -> None:
#     user_query = message.text.strip()
#     if not user_query:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
#         return

#     await message.answer(f"üîç –£–∂–µ –∏—â—É! –û–¥–∏–Ω –º–æ–º–µ–Ω—Ç... üë®‚Äçüíª: <b>{user_query}</b>")

#     results = search_in_file_index(user_query)

#     if results:
#         best = results[0]
#         try:
#             direct_link = build_docs_url(best["path"])
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF:\n{direct_link}"
#             )
#         except Exception as e:
#             base = YANDEX_DISK_FOLDER_PATH.rstrip("/")
#             relative_path = (
#                 best["path"][len(base):].lstrip("/")
#                 if best["path"].startswith(base)
#                 else best["path"].lstrip("/")
#             )
#             await message.answer(
#                 f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:\n<b>{best['name']}</b>\n\n"
#                 f"üìÅ –ü—É—Ç—å –≤ –ø–∞–ø–∫–µ:\n<code>{relative_path}</code>\n\n"
#                 f"üîó –û–±—â–∞—è –ø–∞–ø–∫–∞: https://disk.360.yandex.ru/d/{YANDEX_DISK_PUBLIC_KEY}"
#             )
#     else:
#         thinking_msg = await message.answer("–°–æ—Ä—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª–æ—á–∫–∞–º... –°–µ–π—á–∞—Å –≤—Å—ë –æ–±—ä—è—Å–Ω—é! üóÇÔ∏è")
#         context_brands = "HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems"
#         ai_response = await ask_qwen(user_query, context=context_brands)
        
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
#         await state.update_data(original_query=user_query)
        
#         await thinking_msg.edit_text(
#             f"üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n\n{ai_response}",
#             reply_markup=get_support_keyboard()
#         )

# # --- –ó–∞–ø—É—Å–∫ ---
# async def main() -> None:
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())

# –í–µ—Ä—Å–∏—è –æ—Ç 08.10.2025
import os
import asyncio
import logging
import sys
import re
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
from bot.utils.search_engine import smart_document_search, build_docs_url, should_use_ai_directly, has_only_technical_files
from bot.utils.ai_fallback import ask_ai
from keyboards import main_reply_keyboard, docs_inline_keyboard

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_DISK_FOLDER_PATH = os.getenv("YANDEX_DISK_FOLDER_PATH", "/")
YANDEX_DISK_PUBLIC_KEY = os.getenv("YANDEX_DISK_PUBLIC_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "")  # URL –æ—Ç Render
PORT = int(os.getenv("PORT", 3000))

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logging.basicConfig(level=logging.INFO, stream=sys.stdout)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

GREETINGS = {
    "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
    "–¥–æ–±—Ä–æ–π –Ω–æ—á–∏", "–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è", "–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±–µ–¥–∞", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "—Ö–∞–π", "hello", "hi"
}

SIMPLE_QUERIES = {"—É—Ä—Ä–∏", "urri", "hdl", "–±–∞—Å–ø—Ä–æ", "buspro", "–º–∞—Ç–µ–∫", "matech", "–π–∏–ª–∞–π—Ç", "yeelight"}

class SupportForm(StatesGroup):
    name = State()
    phone = State()
    original_query = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üë®‚Äçüíª –Ø HDL Assistant ‚Äî –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –ø–æ–¥–∫–ª—é—á—É –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n\n"
        "ü§î –ó–∞–ø—É—Ç–∞–ª–∏—Å—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏? üìë –ù—É–∂–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ –º–∞–Ω—É–∞–ª? üöÄ –Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! ‚ú®\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é:",
        reply_markup=main_reply_keyboard
    )

@dp.message(lambda msg: msg.text == "üìö –ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
async def handle_docs_base(message: Message):
    await message.answer(
        "üìÇ –ë–∞–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\nhttps://disk.360.yandex.ru/d/xJi6eEXBTq01sw",
        reply_markup=docs_inline_keyboard
    )

@dp.message(lambda msg: msg.text == "üéì –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def handle_courses(message: Message):
    await message.answer("üéì –û–±—É—á–∞—é—â–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ HDL:\nhttps://iotsystems.getcourse.ru/teach/control")

@dp.message(lambda msg: msg.text == "üìû –¢–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
async def handle_support_button(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(SupportForm.name)

@dp.message(SupportForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä, –±–µ–∑ +7):\n\n–ü—Ä–∏–º–µ—Ä: <code>9777809807</code>", parse_mode="HTML")
    await state.set_state(SupportForm.phone)

@dp.message(SupportForm.phone)
async def process_phone(message: Message, state: FSMContext):
    user_input = message.text.strip()
    digits_only = re.sub(r"\D", "", user_input)
    if len(digits_only) != 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä (–±–µ–∑ +7):\n–ü—Ä–∏–º–µ—Ä: <code>9777809807</code>", parse_mode="HTML")
        return
    full_phone = f"+7{digits_only}"
    await state.update_data(phone=full_phone)
    data = await state.get_data()
    name = data["name"]
    original_query = data.get("original_query", "–ó–∞–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
    support_text = (
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –§–ò–û: {name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {full_phone}\n"
        f"üÜî ID: {message.from_user.id}\n"
        f"üîó @ {message.from_user.username or '‚Äî'}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {original_query}"
    )
    GROUP_CHAT_ID = -1003044266223
    try:
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=support_text)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: https://t.me/hdl_support")
    await state.clear()

async def handle_ai_directly(message: Message, text: str, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–∑—É –∏–¥—É—Ç –∫ –ò–ò
    """
    thinking_msg = await message.answer("–°–æ—Ä—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª–æ—á–∫–∞–º... –°–µ–π—á–∞—Å –≤—Å—ë –æ–±—ä—è—Å–Ω—é! üóÇÔ∏è")
    
    await state.update_data(original_query=text)
    
    query_lower = text.lower()
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ê–ª–∏—Å—ã —Å KNX
    if any(keyword in query_lower for keyword in ["–∞–ª–∏—Å", "–≥–æ–ª–æ—Å–æ–≤", "alisa"]):
        context = (
            "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
            "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö. "
            
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å—ã —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ KNX:\n"
            "1. –¢—Ä–µ–±—É–µ—Ç—Å—è —à–ª—é–∑ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "2. HDL –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Smart Gateway\n" 
            "3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≤—ã–∫ –ê–ª–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º\n"
            "4. KNX - –ø—Ä–æ–≤–æ–¥–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n\n"
            
            "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            "- HDL Smart Gateway —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "- –®–ª—é–∑—ã Buspro —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ê–ª–∏—Å—ã\n" 
            "- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π KNX –∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ HDL Smart\n\n"
            
            "–ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
        )
    else:
        context = (
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
            "–ë—Ä–µ–Ω–¥—ã: HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems. "
            "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
        )
    
    ai_response = await ask_ai(text, context=context)
    
    await thinking_msg.edit_text(
        f"üß† {ai_response}\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
            ]
        ])
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ ---
@dp.message()
async def handle_document_request(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        return

    if text.lower().strip(".,!?") in GREETINGS:
        await message.answer(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!",
            reply_markup=main_reply_keyboard
        )
        return

    if text in ["üìö –ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", "üéì –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìû –¢–µ—Ö. —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"]:
        return

    query_lower = text.lower()

    # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ –ê–ª–∏—Å—É –∏–¥—É—Ç –≤ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    if "–∞–ª–∏—Å" in text.lower() and ("knx" in text.lower() or "–ø–æ–¥–∫–ª—é—á–∏" in text.lower() or "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏" in text.lower()):
        print("üéØ –û–ë–ù–û–í–õ–ï–ù–ù–û: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ –ê–ª–∏—Å—É ‚Üí –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é)")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ò–ò

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞—Ç—å –ò–ò
    use_ai_directly = should_use_ai_directly(text)
    print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è '{text}': {'–ò–ò' if use_ai_directly else '–ø–æ–∏—Å–∫'}")

    if use_ai_directly:
        await handle_ai_directly(message, text, state)
        return

    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    results = await smart_document_search(text)

    if results:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–∞–ø–∫—É
        if len(results) == 1 and results[0].get("is_folder_link"):
            folder_link = results[0].get("folder_link")
            await message.answer(
                f"üìÅ <b>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {text}</b>\n\n"
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                f"üîó <a href='{folder_link}'>–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ</a>\n\n"
                f"–í –ø–∞–ø–∫–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞.",
                parse_mode="HTML"
            )
            return
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        response = f"üîç –ò—â—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ: <b>{text}</b>\n\n"
        response += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}\n\n"
        
        for i, file_data in enumerate(results[:3], 1):
            try:
                # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê –î–õ–Ø –ö–ê–ë–ï–õ–Ø KNX YE00820
                file_name = file_data.get("name", "").lower()
                if "ye00820" in file_name and "knx" in file_name:
                    direct_link = "https://docs.360.yandex.ru/docs/view?url=ya-disk-public%3A%2F%2Fh1up8PyRs7zLi0hvFuTbhsLh7Nh2dv1lmMR1wsc5WOjH0pYg8ba5c4cLlLY6oeuWtFP6gwbjvtaafTptcua4SA%3D%3D%3A%2F01.%20iOT%20Systems%2F02.%20iOT%20%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2FYE00820%20KNX%20%D0%BA%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%20J-Y(ST)Y%2C%202x2x0%2C8%2C%20%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9%20(%D0%BF%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%BF%D0%BE%20100%D0%BC)%2FYE00820%20ru.pdf&name=YE00820%20ru.pdf&nosw=1"
                else:
                    direct_link = build_docs_url(file_data["path"])
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                response += f"{i}. <b>{file_data['name']}</b>\n"
                response += f"   ‚îî‚îÄ üìé <a href='{direct_link}'>–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç</a>\n\n"
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
                response += f"{i}. <b>{file_data['name']}</b>\n"
                response += f"   ‚îî‚îÄ üìé –§–∞–π–ª –≤ –±–∞–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n\n"
        
        response += "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?"
        
        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        await message.answer(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
                ]
            ]),
            parse_mode="HTML"  # –í–∞–∂–Ω–æ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!
        )
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if len(results) == 1 and has_only_technical_files(results):
            await message.answer(
                "ü§î –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∞ –Ω–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.\n\n"
                "–ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üß† –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò", callback_data=f"ask_ai:{text}")]
                ])
            )
        
    else:
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò
        await handle_ai_directly(message, text, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î–∞/–ù–µ—Ç"
@dp.callback_query(lambda c: c.data.startswith("info_helpful:"))
async def handle_info_helpful_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    action = callback.data.split(":")[1]
    data = await state.get_data()
    original_query = data.get("original_query", "–∑–∞–ø—Ä–æ—Å")
    
    if action == "yes":
        response_text = "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å HDL Assistant! üéâ"
        
        # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await callback.message.answer(
            response_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
            ])
        )
        
    elif action == "no":
        response_text = "–£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å - —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üí°"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∂–∏–º–∞–ª "–ù–µ—Ç" —Ä–∞–Ω–µ–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        user_data = await state.get_data()
        if user_data.get('already_clicked_no'):
            await callback.message.answer(
                response_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"ask_ai:{original_query}"),
                        InlineKeyboardButton(text="üìû –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", callback_data="support_form")
                    ]
                ])
            )
        else:
            # –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ "–ù–µ—Ç" - –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            await callback.message.answer(response_text)
            await state.update_data(already_clicked_no=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "new_search")
async def handle_new_search_callback(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üîç –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!")

@dp.callback_query(lambda c: c.data == "support_form")
async def support_form_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(SupportForm.name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò"
@dp.callback_query(lambda c: c.data.startswith("ask_ai:"))
async def handle_ask_ai_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    query = callback.data.replace("ask_ai:", "")
    thinking_msg = await callback.message.answer("–°–æ—Ä—Ç–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª–æ—á–∫–∞–º... –°–µ–π—á–∞—Å –≤—Å—ë –æ–±—ä—è—Å–Ω—é! üóÇÔ∏è")
    
    await state.update_data(original_query=query)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    context = (
        "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
        "–ë—Ä–µ–Ω–¥—ã: HDL, Buspro, Matech, URRI, Yeelight Pro, CoolAutomation, iOT Systems. "
        "–û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
    )
    
    ai_response = await ask_ai(query, context=context)
    
    await thinking_msg.edit_text(
        f"üß† {ai_response}\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∞–º –ø–æ–º–æ–≥–ª–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="info_helpful:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="info_helpful:no")
            ]
        ])
    )

async def on_startup(bot: Bot, base_url: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    if base_url:
        webhook_url = f"{base_url}/webhook"
        await bot.set_webhook(webhook_url)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª–µ–Ω")

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if RENDER_EXTERNAL_URL:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app = web.Application()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path="/webhook")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        setup_application(app, dp, bot=bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞
        async def on_startup_app(app):
            await on_startup(bot, RENDER_EXTERNAL_URL)
        
        app.on_startup.append(on_startup_app)
        app.on_shutdown.append(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        web.run_app(app, host="0.0.0.0", port=PORT)
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        async def run_polling():
            await dp.start_polling(bot)
        
        asyncio.run(run_polling())

if __name__ == "__main__":
    main()