# # # bot/utils/ai_fallback.py
# # import os
# # import httpx
# # import json
# # from dotenv import load_dotenv

# # load_dotenv()

# # OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
# # if not OPENROUTER_API_KEY:
# #     raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# # async def ask_ai(user_query: str, context: str = "") -> str:
# #     system_prompt = (
# #         "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞ (HDL, Buspro, Matech, URRI –∏ –¥—Ä.). "
# #         "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π, —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. "
# #         "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω ‚Äî –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. "
# #         "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å."
# #     )
# #     if context:
# #         system_prompt += f" –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: {context}."

# #     try:
# #         async with httpx.AsyncClient(timeout=30.0) as client:
# #             response = await client.post(
# #                 url="https://openrouter.ai/api/v1/chat/completions",
# #                 headers={
# #                     "Authorization": f"Bearer {OPENROUTER_API_KEY}",
# #                     "Content-Type": "application/json",
# #                     "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",
# #                     "X-Title": "HDL Assistant Bot"
# #                 },
# #                 json={
# #                     "model": "deepseek/deepseek-chat-v3.1:free",
# #                     "messages": [
# #                         {"role": "system", "content": system_prompt},
# #                         {"role": "user", "content": user_query}
# #                     ],
# #                     "temperature": 0.3,
# #                     "max_tokens": 400
# #                 }
# #             )

# #             if response.status_code != 200:
# #                 print(f"OpenRouter error {response.status_code}: {response.text}")
# #                 return (
# #                     "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n"
# #                     "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ (HDL, Buspro, Matech)\n"
# #                     "‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–∞–Ω–µ–ª—å, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –¥–∞—Ç—á–∏–∫)\n"
# #                     "‚Ä¢ –ú–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Granit, MDL64)"
# #                 )

# #             data = response.json()
# #             return data["choices"][0]["message"]["content"].strip()

# #     except Exception as e:
# #         print(f"Exception in AI call: {e}")
# #         return (
# #             "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n"
# #             "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ (HDL, Buspro, Matech)\n"
# #             "‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–∞–Ω–µ–ª—å, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –¥–∞—Ç—á–∏–∫)\n"
# #             "‚Ä¢ –ú–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Granit, MDL64)"
# #         )

# # async def analyze_relevance(user_query: str, filename: str) -> bool:
# #     """
# #     –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò
# #     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ñ–∞–π–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
# #     """
# #     prompt = f"""
# #     –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

# #     –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "{user_query}"
# #     –ò–ú–Ø –§–ê–ô–õ–ê: "{filename}"

# #     –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:
# #     1. "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ê–ª–∏—Å—ã —Å KNX" - —ç—Ç–æ –ø—Ä–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ø–Ω–¥–µ–∫—Å –ê–ª–∏—Å–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ KNX
# #     2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–∞—Ç—á–∏–∫–æ–≤ (R5-60G-KNX, R5-24G-KNX) –ù–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ê–ª–∏—Å–æ–π
# #     3. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã: —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, API, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, –≥–æ–ª–æ—Å–æ–≤–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
# #     4. –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–∞—Å–ø–æ—Ä—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–æ–Ω—Ç–∞–∂—É

# #     –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON —Ñ–æ—Ä–º–∞—Ç–∞:
# #     {{"relevant": true/false, "reason": "–æ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"}}

# #     –ü—Ä–∏–º–µ—Ä –¥–ª—è –ù–ï—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ:
# #     {{"relevant": false, "reason": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç –¥–∞—Ç—á–∏–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ê–ª–∏—Å–æ–π"}}

# #     –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ:
# #     {{"relevant": true, "reason": "—Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"}}
# #     """

# #     try:
# #         async with httpx.AsyncClient(timeout=15.0) as client:
# #             response = await client.post(
# #                 url="https://openrouter.ai/api/v1/chat/completions",
# #                 headers={
# #                     "Authorization": f"Bearer {OPENROUTER_API_KEY}",
# #                     "Content-Type": "application/json",
# #                     "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",
# #                     "X-Title": "HDL Assistant Bot"
# #                 },
# #                 json={
# #                     "model": "deepseek/deepseek-chat-v3.1:free",
# #                     "messages": [
# #                         {"role": "user", "content": prompt}
# #                     ],
# #                     "temperature": 0.1,
# #                     "max_tokens": 200
# #                 }
# #             )

# #             if response.status_code == 200:
# #                 data = response.json()
# #                 content = data["choices"][0]["message"]["content"].strip()
                
# #                 # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
# #                 try:
# #                     result = json.loads(content)
# #                     return result.get("relevant", True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
# #                 except json.JSONDecodeError:
# #                     # –ï—Å–ª–∏ –ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ JSON, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
# #                     if "–Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç" in content.lower() or "false" in content.lower():
# #                         return False
# #                     return True
# #             else:
# #                 print(f"OpenRouter error in relevance analysis: {response.status_code}")
# #                 return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
# #     except Exception as e:
# #         print(f"Exception in relevance analysis: {e}")
# #         return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ





# # bot/utils/ai_fallback.py QWEEN
# import os
# import httpx
# import json
# import logging
# from dotenv import load_dotenv

# load_dotenv()

# OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
# if not OPENROUTER_API_KEY:
#     raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# logger = logging.getLogger(__name__)

# async def ask_ai(user_query: str, context: str = "") -> str:
#     system_prompt = (
#         "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞ (HDL, Buspro, Matech, URRI –∏ –¥—Ä.). "
#         "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π, —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. "
#         "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω ‚Äî –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. "
#         "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å."
#     )
#     if context:
#         system_prompt += f" –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: {context}."

#     try:
#         async with httpx.AsyncClient(timeout=30.0) as client:
#             response = await client.post(
#                 url="https://openrouter.ai/api/v1/chat/completions",  # ‚Üê –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
#                 headers={
#                     "Authorization": f"Bearer {OPENROUTER_API_KEY}",
#                     "Content-Type": "application/json",
#                     "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",  # ‚Üê –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!
#                     "X-Title": "HDL Assistant Bot"
#                 },
#                 json={
#                     "model": "google/gemma-2-9b-it:free",  # ‚Üê —Å—Ç–∞–±–∏–ª—å–Ω–∞—è free-–º–æ–¥–µ–ª—å
#                     "messages": [
#                         {"role": "system", "content": system_prompt},
#                         {"role": "user", "content": user_query}
#                     ],
#                     "temperature": 0.3,
#                     "max_tokens": 400
#                 }
#             )

#             # üîç –õ–æ–≥–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã OpenRouter
#             limit = response.headers.get("X-RateLimit-Limit")
#             remaining = response.headers.get("X-RateLimit-Remaining")
#             if limit and remaining:
#                 logger.info(f"OpenRouter –ª–∏–º–∏—Ç—ã: {remaining}/{limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å")

#             if response.status_code == 429:
#                 logger.warning("OpenRouter: 429 Too Many Requests ‚Äî –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω")
#                 return (
#                     "‚ö†Ô∏è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏. "
#                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1‚Äì2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
#                 )
#             elif response.status_code != 200:
#                 logger.error(f"OpenRouter error {response.status_code}: {response.text}")
#                 return (
#                     "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å:\n"
#                     "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥ (HDL, Buspro, Matech)\n"
#                     "‚Ä¢ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–∞–Ω–µ–ª—å, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –¥–∞—Ç—á–∏–∫)\n"
#                     "‚Ä¢ –ú–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Granit, MDL64)"
#                 )

#             data = response.json()
#             return data["choices"][0]["message"]["content"].strip()

#     except Exception as e:
#         logger.exception(f"–û—à–∏–±–∫–∞ –≤ ask_ai: {e}")
#         return (
#             "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
#         )


# # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
# async def analyze_relevance(user_query: str, filename: str) -> bool:
#     prompt = f"""
#     –ê–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

#     –ó–ê–ü–†–û–°: "{user_query}"
#     –§–ê–ô–õ: "{filename}"

#     –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON: {{"relevant": true/false, "reason": "..."}}
#     """

#     try:
#         async with httpx.AsyncClient(timeout=15.0) as client:
#             response = await client.post(
#                 url="https://openrouter.ai/api/v1/chat/completions",
#                 headers={
#                     "Authorization": f"Bearer {OPENROUTER_API_KEY}",
#                     "Content-Type": "application/json",
#                     "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",
#                     "X-Title": "HDL Assistant Bot"
#                 },
#                 json={
#                     "model": "google/gemma-2-9b-it:free",
#                     "messages": [{"role": "user", "content": prompt}],
#                     "temperature": 0.1,
#                     "max_tokens": 200
#                 }
#             )

#             # –õ–æ–≥–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
#             limit = response.headers.get("X-RateLimit-Limit")
#             remaining = response.headers.get("X-RateLimit-Remaining")
#             if limit and remaining:
#                 logger.info(f"[Relevance] –õ–∏–º–∏—Ç—ã: {remaining}/{limit}")

#             if response.status_code == 200:
#                 content = response.json()["choices"][0]["message"]["content"].strip()
#                 try:
#                     result = json.loads(content)
#                     return result.get("relevant", True)
#                 except json.JSONDecodeError:
#                     return "–Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç" not in content.lower()
#             else:
#                 return True  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

#     except Exception as e:
#         logger.exception(f"–û—à–∏–±–∫–∞ –≤ analyze_relevance: {e}")
#         return True

# bot/utils/ai_fallback.py
import os
import aiohttp
import json
import logging
from dotenv import load_dotenv

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
logger = logging.getLogger(__name__)

async def ask_ai(user_query: str, context: str = "") -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò —á–µ—Ä–µ–∑ OpenRouter
    """
    if not OPENROUTER_API_KEY:
        return "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if len(user_query) > 500:
        user_query = user_query[:500] + "..."
    
    system_prompt = (
        "–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞ (HDL, Buspro, Matech, URRI). "
        "–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."
    )
    if context:
        system_prompt += f" –ë—Ä–µ–Ω–¥—ã: {context}"

    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",
            "X-Title": "HDL Assistant Bot"
        }
        
        data = {
            "model": "google/gemma-2-9b-it:free",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_query}
            ],
            "temperature": 0.3,
            "max_tokens": 350,
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            ) as response:
                
                logger.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    answer = result['choices'][0]['message']['content'].strip()
                    logger.info("‚úÖ –ò–ò –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
                    return answer
                    
                elif response.status == 404:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ 404: {error_text}")
                    return (
                        "ü§ñ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                        "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ OpenRouter.\n\n"
                        "–ê –ø–æ–∫–∞ —è –º–æ–≥—É:\n"
                        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
                        "‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
                        "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
                    )
                    
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return get_fallback_response()

    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return get_fallback_response()

def get_fallback_response() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç"""
    return (
        "ü§ñ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
        "–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n"
        "‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    )

async def analyze_relevance(user_query: str, filename: str) -> bool:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    """
    query_lower = user_query.lower()
    filename_lower = filename.lower()
    
    simple_brands = ["—É—Ä—Ä–∏", "urri", "hdl", "–±–∞—Å–ø—Ä–æ", "buspro", "–º–∞—Ç–µ–∫", "matech"]
    if any(brand in query_lower for brand in simple_brands):
        return True
    
    if "–∞–ª–∏—Å" in query_lower and "knx" in query_lower:
        exclude_patterns = ["r5-", "–¥–∞—Ç—á–∏–∫", "sensor", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫", "–ø–∞—Å–ø–æ—Ä—Ç"]
        if any(pattern in filename_lower for pattern in exclude_patterns):
            return False
        
        include_patterns = ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏", "integration", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏", "connect", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤"]
        if any(pattern in filename_lower for pattern in include_patterns):
            return True
    
    return True