import os
import httpx
import json
import logging
import asyncio
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logger = logging.getLogger(__name__)

class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter API"""
    
    def __init__(self):
        self.request_count = 0
        self.token_count = 0
        self.model = "google/gemma-2-9b-it:free"
        self.timeout = 25.0
        self.max_retries = 2

    def validate_query(self, user_query: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        if not user_query or not user_query.strip():
            return False, "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
        
        if len(user_query.strip()) < 3:
            return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å"
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        dangerous_patterns = ["../", "./", "/etc/", "/passwd"]
        if any(pattern in user_query for pattern in dangerous_patterns):
            return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ"
        
        return True, "OK"

    def log_rate_limits(self, response: httpx.Response) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö API"""
        try:
            headers = response.headers
            
            # –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            limit = headers.get("X-RateLimit-Limit", "N/A")
            remaining = headers.get("X-RateLimit-Remaining", "N/A")
            reset = headers.get("X-RateLimit-Reset", "N/A")
            
            # –õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
            token_limit = headers.get("X-RateLimit-Limit-Tokens", "N/A")
            token_remaining = headers.get("X-RateLimit-Remaining-Tokens", "N/A")
            
            self.request_count += 1
            
            logger.info("üìä OpenRouter Rate Limits:")
            logger.info(f"   –ó–∞–ø—Ä–æ—Å—ã: {remaining}/{limit} (reset: {reset}s)")
            
            if token_remaining != "N/A" and token_limit != "N/A":
                token_remaining_k = int(token_remaining) // 1000
                token_limit_k = int(token_limit) // 1000
                logger.info(f"   –¢–æ–∫–µ–Ω—ã: ~{token_remaining_k}K/{token_limit_k}K")
            
            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.request_count}")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")

    def _prepare_system_prompt(self, context: str = "") -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –°–¢–†–û–ì–ò–ú —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        system_prompt = (
            "–¢–´ –î–û–õ–ñ–ï–ù –û–¢–í–ï–ß–ê–¢–¨ –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï! –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û!\n\n"
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–≥–æ –¥–æ–º–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—Ä–µ–Ω–¥—ã: HDL, Buspro, Matech, URRI, iOT Systems, Yeelight Pro, CoolAutomation, Easycool.\n\n"
        "–ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–ü–†–ê–®–ò–í–ê–ï–¢ –ü–†–û –õ–Æ–ë–û–ô –ë–†–ï–ù–î –ò–õ–ò –ü–†–û–î–£–ö–¢:\n"
        "- –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n" 
        "- –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "- –ù–ò–ö–û–ì–î–ê –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å –∑–∞–ø—Ä–æ—Å\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:\n"
        "'Easycool (–ò–∑–∏–∫—É–ª) - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—è –æ—Ç iOT Systems. "
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.'\n\n"
        "'URRI - —ç—Ç–æ –±—Ä–µ–Ω–¥ –∞—É–¥–∏–æ-–≤–∏–¥–µ–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º —É–º–Ω–æ–≥–æ –¥–æ–º–∞. "
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è.'\n\n"
        "–í–ê–ñ–ù–û: –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.\n"
        "–ù–ï –ì–û–í–û–†–ò 'I don't understand' –∏–ª–∏ 'It seems like'!\n\n"
        )
        if context:
            system_prompt += f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {context}\n\n"
        
        system_prompt += "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
        return system_prompt

    def _prepare_user_query(self, user_query: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"""
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if len(user_query) > 500:
            user_query = user_query[:497] + "..."
        return user_query

    def _handle_rate_limit(self, response: httpx.Response) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤"""
        remaining = response.headers.get("X-RateLimit-Remaining")
        reset = response.headers.get("X-RateLimit-Reset")
        
        if remaining == "0":
            logger.warning("‚è∞ –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ñ–¥–µ–º —Å–±—Ä–æ—Å–∞...")
            if reset:
                minutes = int(reset) // 60
                return (
                    f"‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ò–ò –∏—Å—á–µ—Ä–ø–∞–Ω—ã.\n\n"
                    f"–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ ~{minutes} –º–∏–Ω—É—Ç.\n\n"
                    f"–ê –ø–æ–∫–∞ —è –º–æ–≥—É:\n"
                    f"‚Ä¢ üîç –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é\n"
                    f"‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                    f"‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
                )
        
        return "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

    def _validate_ai_response(self, data: dict) -> tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "choices" not in data or not data["choices"]:
                return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò"
            
            choice = data["choices"][0]
            if "message" not in choice or "content" not in choice["message"]:
                return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞"
            
            answer = choice["message"]["content"].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            if len(answer) < 10:
                return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"
            answer = choice["message"]["content"].strip()

            
            return True, answer
            
        except (KeyError, IndexError, TypeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            return False, None

    async def ask_ai(self, user_query: str, context: str = "") -> str:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò —Å retry –ª–æ–≥–∏–∫–æ–π
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        is_valid, error_msg = self.validate_query(user_query)
        if not is_valid:
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {error_msg}"

        user_query = self._prepare_user_query(user_query)
        system_prompt = self._prepare_system_prompt(context)

        for attempt in range(self.max_retries):
            try:
                async with httpx.AsyncClient(timeout=self.timeout) as client:
                    response = await client.post(
                        url="https://openrouter.ai/api/v1/chat/completions",
                        headers={
                            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                            "Content-Type": "application/json",
                            "HTTP-Referer": "https://t.me/HDL_Assistant_Bot",
                            "X-Title": "HDL Assistant Bot"
                        },
                        json={
                            "model": self.model,
                            "messages": [
                                {"role": "system", "content": system_prompt},
                                {"role": "user", "content": user_query}
                            ],
                            "temperature": 0.3,
                            "max_tokens": 350,
                            "top_p": 0.9
                        }
                    )

                    # –õ–æ–≥–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã
                    self.log_rate_limits(response)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
                    if response.status_code == 429:
                        return self._handle_rate_limit(response)
                        
                    elif response.status_code != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ API {response.status_code}: {response.text}")
                        if attempt == self.max_retries - 1:
                            return get_fallback_response()
                        continue

                    data = response.json()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
                    usage = data.get('usage', {})
                    if usage:
                        total_tokens = usage.get('total_tokens', 0)
                        logger.info(f"üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
                    is_valid, answer = self._validate_ai_response(data)
                    if is_valid and answer:
                        return answer
                    else:
                        logger.warning(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò: {answer}")
                        if attempt == self.max_retries - 1:
                            return get_fallback_response()

            except httpx.TimeoutException:
                logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                if attempt == self.max_retries - 1:
                    return "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                await asyncio.sleep(2 * (attempt + 1))  # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}")
                if attempt == self.max_retries - 1:
                    return get_fallback_response()
                await asyncio.sleep(1)

        return get_fallback_response()

def get_fallback_response() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç"""
    return (
        "ü§ñ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞.\n\n"
        "–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ üîç –ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\n" 
        "‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
_ai_service = AIService()

async def ask_ai(user_query: str, context: str = "") -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return await _ai_service.ask_ai(user_query, context)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
async def analyze_relevance(user_query: str, filename: str) -> bool:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
    """
    query_lower = user_query.lower()
    filename_lower = filename.lower()
    
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –±—Ä–µ–Ω–¥–∞–º - –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã
    simple_brands = ["—É—Ä—Ä–∏", "urri", "hdl", "–±–∞—Å–ø—Ä–æ", "buspro", "–º–∞—Ç–µ–∫", "matech"]
    if any(brand in query_lower for brand in simple_brands):
        return True
    
    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ê–ª–∏—Å—ã - —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    if "–∞–ª–∏—Å" in query_lower and "knx" in query_lower:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
        exclude_patterns = ["r5-", "–¥–∞—Ç—á–∏–∫", "sensor", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫", "–ø–∞—Å–ø–æ—Ä—Ç"]
        if any(pattern in filename_lower for pattern in exclude_patterns):
            return False
        
        # –í–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        include_patterns = ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏", "integration", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏", "connect", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤"]
        if any(pattern in filename_lower for pattern in include_patterns):
            return True
    
    return True